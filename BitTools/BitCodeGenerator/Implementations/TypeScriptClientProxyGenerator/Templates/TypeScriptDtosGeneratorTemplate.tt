<#@ template language="C#" #>
<#@ import namespace="BitTools.Core.Model" #>
<#@ import namespace="Microsoft.CodeAnalysis" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ parameter type="System.Collections.Generic.IList<Dto>" name="Dtos" #>
<#@ parameter type="System.Collections.Generic.IList<EnumType>" name="EnumTypes" #>
<#@ parameter type="System.String" name="TypingsPath" #>
<#@ parameter type="System.Boolean" name="UseCamelCase" #>
/// <reference path="<#= TypingsPath #>" />
<# foreach (Dto dto in Dtos)
{ #>

declare module <#= dto.DtoSymbol.ContainingNamespace #> {
	<#= dto.DtoSymbol.GetDocumentationSummary() #>
	class <#= dto.DtoSymbol.Name #> extends <#= dto.BaseDtoSymbol != null ? dto.BaseDtoSymbol.GetTypescriptTypeName(useArrayForIEnumerableTypes : true) : "$data.Entity" #> {
		<# foreach (IPropertySymbol prp in dto.Properties)
		{ #>
		    <#= prp.GetDocumentationSummary() #>
			<#= (UseCamelCase ? prp.Name.AsCamelCase() : prp.Name) #> : <#= prp.Type.GetTypescriptTypeName(useArrayForIEnumerableTypes : true) #>;
			static <#= (UseCamelCase ? prp.Name.AsCamelCase() : prp.Name) #> : any;
		<# } #>
	}
}

<#}#>

<# foreach (EnumType enumType in EnumTypes)
{ #>

declare module <#= enumType.EnumTypeSymbol.ContainingNamespace #> {
	<#= enumType.EnumTypeSymbol.GetDocumentationSummary() #>
	enum <#= enumType.EnumTypeSymbol.Name #> {
		<# foreach (EnumMember enumMember in enumType.Members)
		{ #>
		    <#= enumMember.Symbol.GetDocumentationSummary() #>
			<#= enumMember.Name #>,
		<# } #>
	}
}

<#}#>